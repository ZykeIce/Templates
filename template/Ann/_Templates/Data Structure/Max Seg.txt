struct SegmentTree{
    vector<ll> T;
    int n, N;
    SegmentTree(int n) : n(n){
        N = 1;
        while(N < n) N*=2;
        T.resize(N*2+1, 0);
    };
    void upd(int i, ll x){
        auto upd = [&](auto upd, int node, int low, int high, int i, ll x) -> void{
            if(low == high){
                T[node] = x;
                return;
            }
            int mid = (low+high)/2;
            if(i <= mid){
                upd(upd, node*2, low, mid, i, x);
            }else{
                upd(upd, node*2+1, mid+1, high, i, x);
            }
            T[node] = T[node*2]+T[node*2+1];
        };
        upd(upd, 1, 1, N, i, x);
    }
    ll sum(int l, int r){
        auto sum = [&](auto sum, int node, int low, int high, int l, int r) -> ll{
            if(low > r || l > high) return 0;
            if(low >= l && r >= high) return T[node];
            int mid = (low+high)/2;
            return sum(sum, node*2, low, mid, l, r) + sum(sum, node*2+1, mid+1, high, l, r);
        };
        return sum(sum, 1, 1, N, l, r);
    }
};